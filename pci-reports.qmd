---
title: "PCI Reports"
format:
  docx:
    toc: true
    number-sections: true
    highlight-style: github
editor: visual
execute: 
  echo: false
---

```{r Data download, include=FALSE}
#Setup Temporary Directory for file storage
temp <- tempdir()
#Load in the helper functions/data required
source("HelperFunctions.R")
#Set data source type Powerbi or Sharepoint
data_source <- "Powerbi"

if(data_source == "Sharepoint"){
  #Sharepoint Token
tk_sp <- qiverse.azure::get_az_tk('sp')
#Load data from CSV
fsh_data <- qiverse.sharepoint::download_sharepoint_file(
  site_url = 'https://wahealthdept.sharepoint.com/sites/WACardiacOutcomeRegistry',
  file_url = 'https://wahealthdept.sharepoint.com/:x:/r/sites/WACardiacOutcomeRegistry/PCI/PCI%20Data/Latest%20NCR%20Submission/Fiona_Stanley_Hospital_2024_PCI_Data.csv?d=w502a1115d07d84e37976119fd0e5ed4e4&csf=1&web=1&e=CipGly',
  token = tk_sp)
rph_data <- qiverse.sharepoint::download_sharepoint_file(
  site_url = 'https://wahealthdept.sharepoint.com/sites/WACardiacOutcomeRegistry',
  file_url = 'https://wahealthdept.sharepoint.com/:x:/r/sites/WACardiacOutcomeRegistry/PCI/PCI%20Data/Latest%20NCR%20Submission/Royal_Perth_Hospital_2024_PCI_Data.csv?d=w7b047d9021874a58bd3241d2ad4837ef&csf=1&web=1&e=HXmpC4',
  token = tk_sp)
scgh_data <- qiverse.sharepoint::download_sharepoint_file(
  site_url = 'https://wahealthdept.sharepoint.com/sites/WACardiacOutcomeRegistry',
  file_url = 'https://wahealthdept.sharepoint.com/:x:/r/sites/WACardiacOutcomeRegistry/PCI/PCI%20Data/Latest%20NCR%20Submission/Sir_Charles_Gairdner_Hospital_2024_PCI_Data.csv?d=w970e2c01ddec4e8aa6456876e8c793b5&csf=1&web=1&e=Jc7bIW',
  token = tk_sp)

#Read in data from CSV
pci_data <- readr::read_csv(c(fsh_data, rph_data, scgh_data), col_types = colTypes)
} else if(data_source == "Powerbi"){
#PowerBI Token
tk = qiverse.azure::get_az_tk('pbi_df')
#Load data from PowerBI
data <- qiverse.powerbi::download_dataflow_table(workspace_name = "PCI Data Set",
                                              dataflow_name = "NCR Template and Hid files",
                                              table_name = "required_columns",
                                              access_token = tk$credentials$access_token)
#Workaround for setting csv col types
readr::write_csv(data, paste0(temp, ".csv"))
#Read in data from PowerBI
pci_data <- readr::read_csv(paste0(temp, ".csv"), col_types = colTypes)
}

```

```{r Data transformation, include=FALSE}
# Required Data Transformations
#Creating period start and end, first and last date of the month
pci_data <- pci_data |> 
  dplyr::mutate(period_start = lubridate::floor_date(dop, unit = "month"),
                period_end = lubridate::ceiling_date(period_start, unit = "month")-1)

#Creating required columns for Indicator calculations
pci_data <- pci_data |>
  dplyr::mutate(
    ## Create dbd based on whether the tbd time occurred before/after top time
    dbd = dplyr::case_when(
      tbd <= top ~ dop + lubridate::days(1),
      tbd > top ~ dop, 
      tbd = NA ~ NA),
    ## Calculate column required for ECG to PCI time
    ecgdb = difftime(tbd, tecgd, units = "mins") + difftime(dbd, decgd, units = "mins"),
    ## Calculate column required for Door to PCI time
    dbdt = difftime(tbd, toa, units = "mins") + difftime(dbd, doa, units = "mins"))

## Summary for Indicator 1
pci_data <- pci_data |>
  dplyr::mutate(NCR1_den = dplyr::if_else(pci == "1" &
                ecgdb >= 0 &
                ecgdb <= 500, 1, 0))

ecg_to_pci_spc <- pci_data |>
  dplyr::filter(NCR1_den == 1) |>
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(num = median(ecgdb))

## Summary for Indicator 2
pci_data <- pci_data |>
  dplyr::mutate(NCR2_den = dplyr::if_else(pci == "1" &
                dbdt >= 0 &
                dbdt <= 500, 1, 0))
                
door_to_pci_spc <- pci_data |>
  dplyr::filter(NCR2_den == 1) |>
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(num = median(dbdt))

## Summary for Indicator 3
pci_data <- pci_data |>
dplyr::mutate(NCR3_den = dplyr::if_else(ihstr != "",1,0))
              
peri_PCI_stroke_fpl <- pci_data |> 
  dplyr::group_by(hname) |>
  dplyr::summarise(
    num = sum(ihstr),
    den = sum(NCR3_den))

peri_PCI_stroke_spc <- pci_data |>
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(num = sum(ihstr),
                   den = sum(NCR3_den))

## Summary for Indicator 5
pci_data <- pci_data |>
  dplyr::mutate(NCR5_den = 1,
                NCR5_num = ifelse(dis == "6", 1, 0))

ihm_fpl <- pci_data |> 
  dplyr::group_by(hname) |>
  dplyr::summarise(
    num = sum(NCR5_num, na.rm = T),
    den = sum(NCR5_den, na.rm = T))

ihm_spc <- pci_data |>
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(num = sum(NCR5_num),
                   den = sum(NCR5_den))

## Summary for Indicator 6
pci_data <- pci_data |>
  dplyr:::mutate(NCR6_den = ifelse(dis != "6", 1, 0),
                 NCR6_num = ifelse(NCR6_den == 1 &
                              crh30 == "1" &
                              pc30 != "1", 1, 0))

unplanned_readmission_fpl <- pci_data |> 
  dplyr::group_by(hname) |>
  dplyr::summarise(
    num = sum(NCR6_num, na.rm = T),
    den = sum(NCR6_den, na.rm = T))

unplanned_readmission_spc <- pci_data |>
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(num = sum(NCR6_num, na.rm = T),
                   den = sum(NCR6_den, na.rm = T))

#NCR 8
pci_data <- pci_data |> 
  dplyr::mutate(NCR8_den = 1,
                NCR8_num = dplyr::if_else((dop + 30) <= dmort30 |
                                          dis == "6", 1, 0, missing = 0))

#Group data for the funnel plot function
mort_30_day_fpl <- pci_data |> 
  dplyr::group_by(hname) |>
  dplyr::summarise(
    num = sum(NCR8_num),
    den = sum(NCR8_den))

#Group data for the SPC function
mort_30_day_spc <- pci_data |> 
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(
    num = sum(NCR8_num),
    den = sum(NCR8_den))

#NCR 9
pci_data <- pci_data |> 
  dplyr::mutate(NCR9_den = dplyr::if_else(dis != "6" & 
                                          dstp != "2" & 
                                          doll != "2" & 
                                          is.na(dstp) == F &
                                          is.na(doll) == F &
                                          dstp != "3" & 
                                          doll != "3" & 
                                          dstp != "" & 
                                          doll != "", 1, 0, missing = 0),
                NCR9_num = dplyr::if_else(NCR9_den == 1 & 
                                         (dstp == "1" | doll == "1"), 1, 0, missing = 0))

#Group data for the funnel plot function
lipid_lowering_fpl <- pci_data |> 
  dplyr::group_by(hname) |>
  dplyr::summarise(
    num = sum(NCR9_num),
    den = sum(NCR9_den))

#Group data for the SPC function
lipid_lowering_spc <- pci_data |> 
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(
    num = sum(NCR9_num),
    den = sum(NCR9_den))


#NCR 10
pci_data <- pci_data |> 
  dplyr::mutate(NCR10_den = dplyr::if_else(dis != "6" &
                                           crehab != "-1" &
                                           crehab != "", 1, 0, missing = 0),
                NCR10_num = dplyr::if_else(NCR10_den == 1 & 
                                           crehab == "1", 1, 0, missing = 0))

#Group data for the funnel plot function
cardiac_rehab_fpl <- pci_data |> 
  dplyr::group_by(hname) |>
  dplyr::summarise(
    num = sum(NCR10_num),
    den = sum(NCR10_den))

#Group data for the SPC function
cardiac_rehab_spc <- pci_data |> 
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(
    num = sum(NCR10_num),
    den = sum(NCR10_den))


#NCR 11
pci_data <- pci_data |> 
  dplyr::mutate(NCR11_den = dplyr::if_else(dis != "6" & 
                                           dasp != "2" & 
                                           doap != "2" & 
                                           is.na(dasp) == F &
                                           is.na(doap) == F &
                                           dasp != "3" & 
                                           doap != "3" & 
                                           dasp != "" & 
                                           doap != "", 1, 0, missing = 0),
                NCR11_num = dplyr::if_else(NCR11_den == 1 & 
                                          (dasp == "1" | doap == "1"), 1, 0, missing = 0))

#Group data for the funnel plot function
antiplatelet_fpl <- pci_data |> 
  dplyr::group_by(hname) |>
  dplyr::summarise(
    num = sum(NCR11_num),
    den = sum(NCR11_den))

#Group data for the SPC function
antiplatelet_spc <- pci_data |> 
  dplyr::group_by(period_start, period_end) |>
  dplyr::summarise(
    num = sum(NCR11_num),
    den = sum(NCR11_den))
```


## NCR 1: Time from diagnostic ECG to PCI mediated reperfusion

### SPC

```{r Indicator 1}
## Generate the SPC chart for Indicator 1
tempFile <- paste0(temp, "/NCR1_fpl.html")
qiverse.qiplotly::spc_plotly_create(ecg_to_pci_spc$period_end,
                                    numerator = ecg_to_pci_spc$num,
                                    denominator = rep(1, nrow(ecg_to_pci_spc)),
                                    data_type = "i",
                                    better_is = "Lower",
                                    y_format = "Numeric",
                                    title = "Indicator 1: Time from diagnostic ECG to PCI mediated reperfusion.",
                                    spc_period_start = min(pci_data$period_start),
                                    spc_period_end = max(pci_data$period_end),
                                    show_legend = TRUE)|> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR1_fpl.png")

```

## NCR 2: Time from door to PCI mediated reperfusion

### SPC

```{r Indicator 2}
## Generate the SPC chart for Indicator 2
tempFile <- paste0(temp, "/NCR2_fpl.html")
qiverse.qiplotly::spc_plotly_create(door_to_pci_spc$period_end,
                                    numerator = as.numeric(door_to_pci_spc$num),
                                    denominator = rep(1, nrow(door_to_pci_spc)),
                                    data_type = "i",
                                    better_is = "Lower",
                                    y_format = "Numeric",
                                    title = "Indicator 2: Time from door to PCI mediated reperfusion.",
                                    spc_period_start = min(pci_data$period_start),
                                    spc_period_end = max(pci_data$period_end))|> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR2_fpl.png")

```

## NCR 3: Peri-PCI stroke

### Funnel

``` {r Indicator_funnel 3}
## Generate the Funnel chart for Indicator 3
tempFile <- paste0(temp, "/NCR3_fpl.html")
qiverse.qiplotly::fpl_plotly_create(
                  numerator = peri_PCI_stroke_fpl$num,
                  denominator = peri_PCI_stroke_fpl$den,
                  group = peri_PCI_stroke_fpl$hname,
                  better_is = "Lower",
                  y_limit_upper = 2,
                  title = "Indicator 3: Proportion of Peri-PCI stroke",
                  funnel_period_start = min(pci_data$period_start),
                  funnel_period_end = max(pci_data$period_end),
                  show_legend = TRUE)|> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR3_fpl.png")

```

### SPC

``` {r Indicator 3}
## Generate the SPC chart for Indicator 3
tempFile <- paste0(temp, "/NCR3_fpl.html")
qiverse.qiplotly::spc_plotly_create(peri_PCI_stroke_spc$period_end,
                  numerator = peri_PCI_stroke_spc$num,
                  denominator = peri_PCI_stroke_spc$den,
                  data_type = "p",
                  better_is = "Lower",
                  title = "Indicator 3: Proportion of Peri-PCI stroke",
                  spc_period_start = min(pci_data$period_start),
                  spc_period_end = max(pci_data$period_end))|> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR3_fpl.png")

```


## NCR 5: In-hospital mortality

### Funnel

``` {r Indicator_funnel 5}
## Generate the Funnel chart for Indicator 5
tempFile <- paste0(temp, "/NCR5_fpl.html")
qiverse.qiplotly::fpl_plotly_create(
                  numerator = ihm_fpl$num,
                  denominator = ihm_fpl$den,
                  group = ihm_fpl$hname,
                  better_is = "Lower",
                  y_limit_upper = 5,
                  title = "Indicator 5: In-hospital mortality",
                  funnel_period_start = min(pci_data$period_start),
                  funnel_period_end = max(pci_data$period_end))|> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR5_fpl.png")

```
### SPC

``` {r Indicator 5}
## Generate the SPC chart for Indicator 5
tempFile <- paste0(temp, "/NCR5_fpl.html")
qiverse.qiplotly::spc_plotly_create(ihm_spc$period_end,
                  numerator = ihm_spc$num,
                  denominator = ihm_spc$den,
                  data_type = "p",
                  better_is = "Lower",
                  title = "Indicator 5: In-hospital mortality",
                  spc_period_start = min(pci_data$period_start),
                  spc_period_end = max(pci_data$period_end))|> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR5_fpl.png")

```

## NCR 6: 30 day unplanned cardiac readmission rate after PCI

### Funnel

``` {r Indicator_funnel 6}
## Generate the Funnel chart for Indicator 6
tempFile <- paste0(temp, "/NCR6_fpl.html")
qiverse.qiplotly::fpl_plotly_create(
                  numerator = unplanned_readmission_fpl$num,
                  denominator = unplanned_readmission_fpl$den,
                  group = unplanned_readmission_fpl$hname,
                  better_is = "Lower",
                  y_limit_upper = 10,
                  title = "Indicator 6: 30 day unplanned cardiac readmission rate after PCI",
                  funnel_period_start = min(pci_data$period_start),
                  funnel_period_end = max(pci_data$period_end))|> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR6_fpl.png")

```

### SPC

``` {r Indicator 6}
## Generate the SPC chart for Indicator 6
tempFile <- paste0(temp, "/NCR6_fpl.html")
qiverse.qiplotly::spc_plotly_create(unplanned_readmission_spc$period_end,
                  numerator = unplanned_readmission_spc$num,
                  denominator = unplanned_readmission_spc$den,
                  data_type = "p",
                  better_is = "Lower",
                  y_format = "Percentage",
                  title = "Indicator 6: 30 day unplanned cardiac readmission rate after PCI",
                  spc_period_start = "2024-01-01",
                  spc_period_end = "2024-12-31")|> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR6_fpl.png")

```

## NCR 8: 30 Day Mortality

### Funnel

```{r NCR8 Funnel}
tempFile <- paste0(temp, "/NCR8_fpl.html")
qiverse.qiplotly::fpl_plotly_create(numerator = mort_30_day_fpl$num,
                  denominator = mort_30_day_fpl$den,
                  group = mort_30_day_fpl$hname,
                  y_limit_upper = 10,
                  title = "30 Day Mortality",
                  better_is = "Lower",
                  funnel_period_start = min(pci_data$period_start),
                  funnel_period_end = max(pci_data$period_end)) |> 
  #Save the plotly plot into a html file - required to output to word
  htmlwidgets::saveWidget(file = tempFile)
#Snapshot the html file and save it as a png
webshot::webshot(url = tempFile, file = "Plots/NCR8_fpl.png")
```

### SPC

```{r NCR8 SPC}
tempFile <- paste0(temp, "/NCR8_spc.html")
qiverse.qiplotly::spc_plotly_create(x = mort_30_day_spc$period_end,
                  numerator = mort_30_day_spc$num,
                  denominator = mort_30_day_spc$den,
                  title = "30 Day Mortality",
                  better_is = "Lower",
                  spc_period_start = min(pci_data$period_start),
                  spc_period_end = max(pci_data$period_end)) |> 
  htmlwidgets::saveWidget(file = tempFile) 

webshot::webshot(url = tempFile, file = "Plots/NCR8_spc.png")
```

## NCR 9: Patients Discharged on Lipid-Lowering Therapy

### Funnel

```{r NCR9 Funnel}
tempFile <- paste0(temp, "/NCR9_fpl.html")
qiverse.qiplotly::fpl_plotly_create(numerator = lipid_lowering_fpl$num,
                  denominator = lipid_lowering_fpl$den,
                  group = lipid_lowering_fpl$hname,
                  title = "Discharged on Lipid-Lowering Therapy",
                  better_is = "Higher",
                  y_limit_lower = 90,
                  funnel_period_start = min(pci_data$period_start),
                  funnel_period_end = max(pci_data$period_end)) |> 
  htmlwidgets::saveWidget(file = tempFile)

webshot::webshot(url = tempFile, file = "Plots/NCR9_fpl.png")
```

### SPC

```{r NCR9 SPC}
tempFile <- paste0(temp, "/NCR9_spc.html")
qiverse.qiplotly::spc_plotly_create(x = lipid_lowering_spc$period_end,
                  numerator = lipid_lowering_spc$num,
                  denominator = lipid_lowering_spc$den,
                  title = "Discharged on Lipid-Lowering Therapy",
                  better_is = "Higher",
                  spc_period_start = min(pci_data$period_start),
                  spc_period_end = max(pci_data$period_end)) |> 
  htmlwidgets::saveWidget(file = tempFile)

webshot::webshot(url = tempFile, file = "Plots/NCR9_spc.png")
```

## NCR 10: Patients Referred to Cardiac Rehabilitation

### Funnel

```{r NCR10 Funnel}
tempFile <- paste0(temp, "/NCR10_fpl.html")
qiverse.qiplotly::fpl_plotly_create(numerator = cardiac_rehab_fpl$num,
                  denominator = cardiac_rehab_fpl$den,
                  group = cardiac_rehab_fpl$hname,
                  title = "Referred to Cardiac Rehabilitation",
                  better_is = "Higher",
                  y_limit_lower = 70,
                  funnel_period_start = min(pci_data$period_start),
                  funnel_period_end = max(pci_data$period_end)) |> 
  htmlwidgets::saveWidget(file = tempFile)

webshot::webshot(url = tempFile, file = "Plots/NCR10_fpl.png")
```

### SPC

```{r NCR10 SPC}
tempFile <- paste0(temp, "/NCR10_spc.html")
qiverse.qiplotly::spc_plotly_create(x = cardiac_rehab_spc$period_end,
                  numerator = cardiac_rehab_spc$num,
                  denominator = cardiac_rehab_spc$den,
                  title = "Referred to Cardiac Rehabilitation",
                  better_is = "Higher",
                  spc_period_start = min(pci_data$period_start),
                  spc_period_end = max(pci_data$period_end)) |> 
  htmlwidgets::saveWidget(file = tempFile)

webshot::webshot(url = tempFile, file = "Plots/NCR10_spc.png")
```

## NCR 11: Patients Discharged on Dual Antiplatelet Therapy

### Funnel

```{r NCR11 Funnel}
tempFile <- paste0(temp, "/NCR11_fpl.html")
qiverse.qiplotly::fpl_plotly_create(numerator = antiplatelet_fpl$num,
                  denominator = antiplatelet_fpl$den,
                  group = antiplatelet_fpl$hname,
                  title = "Discharged on Dual Antiplatelet Therapy",
                  better_is = "Higher",
                  y_limit_upper = 90,
                  funnel_period_start = min(pci_data$period_start),
                  funnel_period_end = max(pci_data$period_end)) |> 
  htmlwidgets::saveWidget(file = tempFile)

webshot::webshot(url = tempFile, file = "Plots/NCR11_fpl.png")
```

### SPC

```{r NCR11 SPC}
tempFile <- paste0(temp, "/NCR11_spc.html")
qiverse.qiplotly::spc_plotly_create(x = antiplatelet_spc$period_end,
                  numerator = antiplatelet_spc$num,
                  denominator = antiplatelet_spc$den,
                  title = "Discharged on Dual Antiplatelet Therapy",
                  better_is = "Higher",
                  spc_period_start = min(pci_data$period_start),
                  spc_period_end = max(pci_data$period_end)) |> 
  htmlwidgets::saveWidget(file = tempFile)

webshot::webshot(url = tempFile, file = "Plots/NCR11_spc.png")
```
